<?php eval(base64_decode('session_start();
include "./404/pro.php";
// Tambahkan logika logout
if (isset($_GET['logout'])) {
    session_destroy();
    header("Location: /index.php");
    exit();
}

if (!isset($_SESSION['gm_video'])) {
    header("Location: /index.php");
    exit();
}
?>
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <title>Terlindungi | Hak Cipta 2025 | Venom Gem Cyber™ (VGC) </title>
	    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script>
        var txt = "Terlindungi | Hak Cipta 2025 | Venom Gem Cyber™ (VGC) "; 
        var speed = 200; 
        var refresh = null; 

        function moveTitle() {
            document.title = txt; 
            txt = txt.substring(1, txt.length) + txt.charAt(0); 
            refresh = setTimeout("moveTitle()", speed); 
        }

        moveTitle(); 
    </script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const COPYRIGHT_MESSAGE = "PERINGATAN HAK CIPTA! Tindakan Anda (Klik Kanan/Menyalin) diblokir. Konten ini dilindungi oleh undang-undang.";

            document.addEventListener('contextmenu', function(event) {
                event.preventDefault();
                alert(COPYRIGHT_MESSAGE + "\n\n");
            });

            document.addEventListener('keydown', function(e) {
                const forbiddenKeys = ['C', 'U'];
                
                if (e.key === 'F12' || e.keyCode === 123) {
                    e.preventDefault();
                    alert(COPYCOPYRIGHT_MESSAGE + "\n\n(Aksi: Developer Tools/F12 diblokir)");
                    return false;
                }

                if (e.ctrlKey || e.metaKey) {
                    if (forbiddenKeys.includes(e.key.toUpperCase())) {
                        e.preventDefault();
                        alert(COPYRIGHT_MESSAGE + `\n\n(Aksi: Perintah Ctrl+${e.key.toUpperCase()} diblokir)`);
                        return false;
                    }

                    if (e.shiftKey && (e.key === 'I' || e.key === 'J' || e.key === 'K')) {
                         e.preventDefault();
                         alert(COPYRIGHT_MESSAGE + "\n\n(Aksi: Inspect Element/Console diblokir)");
                         return false;
                    }
                }
            });

            document.addEventListener('selectstart', function(e) {
                e.preventDefault();
                alert(COPYRIGHT_MESSAGE + "\n\n(Aksi: Seleksi Teks diblokir)");
                return false;
            });

        });
    </script>
    
    <style>
        body {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            cursor: default;
        }
    </style>

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <style>
        body {
            margin: 0;
            font-family: 'Poppins', sans-serif;
            background-color: #121212;
            color: #e0e0e0;
        }
        .container {
            max-width: 480px;
            margin: 40px auto;
            background-color: #1f1f1f;
            padding: 24px;
            border-radius: 16px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.6);
        }
        h2 {
            text-align: center;
            font-size: 20px;
            color: #00ffff;
            margin-bottom: 24px;
        }
        label {
            display: block;
            margin: 12px 0 4px;
            font-size: 14px;
            color: #bbbbbb;
        }
        input[type="text"],
        input[type="file"],
        button {
            width: 100%;
            padding: 12px;
            font-size: 14px;
            border-radius: 10px;
            border: none;
            background-color: #2a2a2a;
            color: #fff;
            box-sizing: border-box;
        }
        button {
            margin-top: 18px;
            background-color: #00c17b;
            font-weight: 600;
            transition: background 0.3s ease;
        }
        button:hover {
            background-color: #00a46c;
        }
        #result {
            margin-top: 20px;
            text-align: center;
            font-size: 13px;
            color: #00ffff;
        }
        .footer {
            margin-top: 30px;
            font-size: 13px;
            background-color: #181818;
            padding: 18px;
            border-radius: 12px;
        }
        .footer h4 {
            margin-bottom: 8px;
            font-size: 14px;
            color: #fff;
        }
        .footer ul {
            list-style: none;
            padding: 0;
            margin: 0 0 12px 0;
        }
        .footer li {
            margin-bottom: 6px;
        }
        .footer a {
            color: #00ffff;
            text-decoration: none;
        }
        .created-by {
            text-align: center;
            margin-top: 16px;
            font-size: 12px;
            color: #666;
        }
    </style>

</head>

<body>

  <div class="container">

    <h2>🚀 Buat Website Otomatis</h2>
	  <div class="d-flex justify-content-between align-items-center mb-4 mt-4 ms-2" style="max-width: 500px; width: 90%;">
    <button onclick='location.href="vercel.php"' class="btn btn-secondary btn-glass me-2 flex-fill">Home</button>
    <button onclick='location.href="index.php"' class="btn btn-secondary btn-glass me-2 flex-fill text-nowrap">Menu Depan</button>
    <button onclick='location.href="?logout=1"' class="btn btn-secondary btn-glass flex-fill">Logout</button>
</div>

    <form id="deployForm">

      <label>Nama Website</label>
      <input type="text" id="siteName" placeholder="contoh: mykerenweb" required>

      <label>Upload File (Index.html atau ZIP)</label>
      <input type="file" id="htmlFile" accept=".html,.zip,application/zip" required>

      <button type="submit">Buat Sekarang</button>
    </form>

    <div id="result"></div>

    <div class="footer">

      <h4>📌 Syarat & Ketentuan</h4>
      <ul>
        <li>File tunggal wajib bernama <strong>index.html</strong>.</li>
        <li>Jika upload file <strong>ZIP</strong>, harus mengandung <strong>index.html</strong> di level root.</li>
        <li>Tidak boleh mengandung konten ilegal atau phishing.</li>
        <li>Website akan bersifat publik & gratis.</li>
      </ul>

      <h4>📞 Kontak Admin</h4>
      <ul>
        <li>WhatsApp: <a href="https://wa.me/6287713490651" target="_blank">Owner Web</a></li>
        <li>Telegram: <a href="https://t.me/6287713490651" target="_blank">Owner Web</a></li>
        <li>Channel: <a href="https://whatsapp.com/channel/02900Vb6geFSW509eBLIp02" target="_blank">Channel Kami</a></li>
      </ul>

      <div class="created-by">🌐 Create by <strong>Cecep</strong></div>
    </div>

  </div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Ganti Token Anda di sini
    const vercelToken = "vjpWE2hUyyfiX2OVA3DpQY6e"; 

    // Fungsi utilitas untuk mengkonversi ArrayBuffer menjadi string Base64
    const arrayBufferToBase64 = (buffer) => {
        let binary = '';
        const bytes = new Uint8Array(buffer);
        const len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return btoa(binary);
    };

    document.getElementById("deployForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const siteName = document.getElementById("siteName").value.trim();
        const fileInput = document.getElementById("htmlFile");
        const resultDiv = document.getElementById("result");

        if (!siteName || fileInput.files.length === 0) {
            alert("Isi nama dan upload file!");
            return;
        }

        const file = fileInput.files[0];
        resultDiv.innerHTML = "📤 proses...";

        let deployFiles = [];
        let indexHtmlContent = null;
        let isArchive = file.name.toLowerCase().endsWith('.zip') || file.type === 'application/zip';

        // --- 1. HANDLE ZIP EXTRACTION ---
        if (isArchive) {
            resultDiv.innerHTML = "⏳ Mengekstrak file ZIP (ini mungkin butuh waktu)...";
            try {
                const zip = await new JSZip().loadAsync(file);
                
                let foundIndex = false;
                
                const promises = [];
                zip.forEach((relativePath, zipEntry) => {
                    if (!zipEntry.dir) {
                        // Tentukan format konten: string untuk teks, arraybuffer untuk biner
                        const isBinary = !relativePath.toLowerCase().match(/\.(html|css|js|json|xml|svg|txt|php|md|yml|yaml|log)$/);
                        const format = isBinary ? "arraybuffer" : "string";
                        
                        promises.push(zipEntry.async(format).then(content => {
                            let fileData = content;
                            
                            // Jika biner, konversi ke Base64
                            if (isBinary) {
                                fileData = arrayBufferToBase64(content);
                            }

                            deployFiles.push({
                                file: relativePath,
                                data: fileData
                            });
                            
                            // Cek dan simpan konten index.html
                            if (relativePath.toLowerCase() === 'index.html') {
                                indexHtmlContent = content;
                                foundIndex = true;
                            }
                        }));
                    }
                });

                await Promise.all(promises);

                if (!foundIndex) {
                    resultDiv.innerHTML = "⚠️ Gagal: File ZIP harus mengandung file bernama 'index.html' di level root.";
                    return;
                }

            } catch (err) {
                resultDiv.innerHTML = "❌ Gagal mengekstrak file ZIP. Pastikan file tidak korup atau terlalu besar.";
                console.error("ZIP Error:", err);
                return;
            }
        } 
        // --- 2. HANDLE SINGLE HTML FILE (wajib index.html) ---
        else if (file.name.toLowerCase() === 'index.html') {
            indexHtmlContent = await file.text();
            deployFiles.push({
                file: "index.html",
                data: indexHtmlContent
            });
        } 
        // --- 3. BLOKIR FILE LAIN ---
        else {
             resultDiv.innerHTML = "⚠️ Gagal: Hanya file 'index.html' tunggal atau file arsip '.zip' yang didukung.";
             return;
        }

        // --- 4. DEPLOY KE VERCEL ---

        resultDiv.innerHTML = "⏳ Membuat project di Vercel...";
        try {
            // Coba buat project (Vercel akan skip jika sudah ada)
            await fetch("https://api.vercel.com/v10/projects", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${vercelToken}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    name: siteName,
                    framework: null
                })
            });
        } catch (err) {
             console.warn("Gagal membuat project di Vercel (mungkin sudah ada, melanjutkan deploy).");
        }


        resultDiv.innerHTML = "🚀 Deploying ke Vercel...";
        const payload = {
            name: siteName,
            project: siteName,
            target: "production",
            files: deployFiles, // Menggunakan array file hasil ekstraksi/tunggal
            projectSettings: {
                framework: null,
                buildCommand: null,
                devCommand: null,
                outputDirectory: null
            }
        };

        try {
            const response = await fetch("https://api.vercel.com/v13/deployments", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${vercelToken}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(payload)
            });

            const data = await response.json();

            if (data.url) {
                resultDiv.innerHTML = `✅ Website berhasil dibuat:<br><a href="https://${siteName}.vercel.app" target="_blank">https://${siteName}.vercel.app</a>`;
            } else {
                resultDiv.innerHTML = `❌ Gagal: ${data.error?.message || "Terjadi kesalahan saat deployment Vercel."}`;
            }
        } catch (err) {
            resultDiv.innerHTML = "❌ Koneksi gagal ke Vercel.";
            console.error("Vercel Deploy Error:", err);
        }
    });
  </script>
</body>
</html>')); ?>