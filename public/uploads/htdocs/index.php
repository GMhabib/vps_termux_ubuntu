<?php eval(base64_decode('session_start();
include "./404/pro.php";
// Atur peran sebagai admin secara default
$ADMIN_PASS = '8154'; // ganti password

// Cek status login
$logged = isset($_SESSION['gm_video']) && $_SESSION['gm_video'];

// Log out
if (isset($_GET['logout'])) {
    session_destroy();
    header('Location: ' . basename($_SERVER['PHP_SELF']));
    exit;
}

// Tangani permintaan login
if (isset($_POST['action']) && $_POST['action'] === 'login') {
    if ($_POST['password'] === $ADMIN_PASS) {
        $_SESSION['gm_video'] = true;
        header('Location: ' . $_SERVER['PHP_SELF']);
        exit;
    } else {
        $error = "Password salah";
    }
}
// Jika belum login, hentikan eksekusi di sini
if (!$logged) {
    // Tampilan HTML untuk halaman login
  ?>
    <!DOCTYPE html>
    <html lang="id">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Venom Gem Cyber 💞</title>
      <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Handlee&family=Sriracha&display=swap" rel="stylesheet">
      <script src="https://unpkg.com/typeit@8.7.0/dist/index.umd.js"></script><link rel="stylesheet" href="">
    </head>
    <style>
        *{margin:0;padding:0;box-sizing:border-box}
        :root{--color-flap:#d46a84;--color-env:#f8e1e9;--color-env2:#D4AFB8;--color-heart:#ff6f91;--color-sparkle:#ffd1dc}
        body {color:#fff;overflow-x:hidden;position:relative;font-family:'Montserrat',sans-serif;/*background: linear-gradient(180deg,#1e3a8a,#3b0764);*/background:rgba(0,0,0,1);z-index: 1;}
        .background-overlay {position: fixed;top: 0;left: 0;width: 100%;height: 100%;background: url('https://htmlku.com/0/wp.jpg') no-repeat center center fixed;background-size: cover;opacity: 0.4;z-index: 0;animation: zoomRotate 12s ease-in-out infinite;}
        @keyframes zoomRotate {0%{transform: scale(1) rotate(0deg);}25%{transform: scale(1.2) rotate(2deg);}50%{transform: scale(1) rotate(0deg);}75%{transform: scale(1.2) rotate(-2deg);}100%{transform: scale(1) rotate(0deg);}}
        .kotak{margin:0 auto;margin-top:111px;transform:scale(0);transition:all .7s ease;background: rgba(248, 225, 233, 0.1);backdrop-filter:blur(10px);border-radius:30px;box-shadow: 0 8px 32px rgba(212, 175, 184, 0.4);border:2px solid rgba(255,255,255, 0.5);padding:0;text-align:center;max-width:80%;width:400px;min-height:200px;position:relative;z-index:1}
        #envelope{margin:0 auto;margin-top:150px;position:relative;width:160px;height:110px;border-bottom-left-radius:6px;border-bottom-right-radius:6px;top:160px;background-color:var(--color-flap);box-shadow:0 4px 20px rgba(0,0,0,0.1)}
        .front{position:absolute;width:0;height:0;z-index:3}
        .flap{border-left:80px solid transparent;border-right:80px solid transparent;border-bottom:55px solid transparent;border-top:55px solid var(--color-flap);transform-origin:top;pointer-events:none}
        .pocket{border-left:80px solid var(--color-env);border-right:8px solid var(--color-env);border-bottom:55px solid var(--color-env2);border-top:55px solid transparent;border-bottom-left-radius:6px;border-bottom-right-radius:6px}
        .letter{position:relative;background-color:#e0d9dd;width:90%;margin:0 auto;height:100%;top:0%;border-radius:6px;box-shadow:0 2px 26px rgba(0,0,0,0.08);padding:15px;box-sizing:border-box}
        .letter:after{content:'';position:absolute;top:0;bottom:0;left:0;right:0;background-image:linear-gradient(180deg,rgba(255,255,255,0) 25%,rgba(255,231,236,0.7) 55%,rgba(255,231,236,1) 100%)}
        .message{position:relative;z-index:2;font-family:'Handlee',cursive;color:#d46a84;text-align:center;line-height:1;padding-top:0}
        .message p{margin:10px 0;font-size:1.4em;text-shadow:0 2px 3px rgba(0,0,0,0.1)}
        .envlope-wrapper{height:210px;margin-top:0px;/*animation:float 3s ease-in-out infinite*/}
        @keyframes float{0%,100%{transform:translateY(0)}50%{transform:translateY(-10px)}}
        .open .flap{transform:rotateX(180deg);transition:transform 0.4s ease,z-index 0.6s;z-index:1}
        .close .flap{transform:rotateX(0deg);transition:transform 0.4s 0.6s ease,z-index 1s;z-index:5}
        .close .letter{transform:translateY(0);transition:transform 0.4s ease,z-index 1s;z-index:1}
        .open .letter{transform:translateY(-40px) rotate(-2.5deg);transition:transform 0.4s 0.2s ease,z-index 0.6s;z-index:2}
        .letter-corner{position:absolute;width:10px;height:10px;border:1px solid #ffd1dc;border-radius:2.5px;z-index:3}
        .corner-tl{top:5px;left:5px;border-right:none;border-bottom:none}
        .corner-br{bottom:5px;right:5px;border-left:none;border-top:none}
        .hearts,.sparkles{position:absolute;top:55px;left:0;right:0;z-index:2}
        .heart,.sparkle{position:absolute;bottom:0;pointer-events:none}
        .heart:before,.heart:after{content:"";position:absolute;left:12.5px;top:0;width:12.5px;height:25px;background:var(--color-heart);border-radius:12.5px 12.5px 0 0;transform:rotate(-45deg);transform-origin:0 100%}
        .heart:after{left:0;transform:rotate(45deg);transform-origin:100% 100%}
        .sparkle{width:4px;height:4px;background:var(--color-sparkle);border-radius:50%;animation:sparkleTwinkle 1s infinite}
        .close .heart,.close .sparkle{opacity:0;animation:none}
        .a1{left:20%;transform:scale(0.6);animation:slideUp 4s linear infinite,sideSway 2s ease-in-out infinite alternate}
        .a2{left:55%;animation:slideUp 5s linear infinite,sideSway 4s ease-in-out infinite alternate}
        .a3{left:10%;transform:scale(0.8);animation:slideUp 7s linear infinite,sideSway 2s ease-in-out infinite alternate}
        .s1{left:30%;animation:sparkleUp 3s linear infinite}
        .s2{left:60%;animation:sparkleUp 4s linear infinite}
        .s3{left:45%;animation:sparkleUp 5s linear infinite}
        @keyframes slideUp{0%{top:0}100%{top:-600px}}
        @keyframes sideSway{0%{margin-left:0}50%{margin-left:50px}100%{margin-left:0}}
        @keyframes sparkleUp{0%{transform:translateY(0);opacity:1}100%{transform:translateY(-500px) rotate(360deg);opacity:0}}
        @keyframes sparkleTwinkle{0%,100%{transform:scale(1)}50%{transform:scale(1.5)}}
        .reset, .tombol{position:relative;text-align:center;margin-top:20px}
        .reset button, .tombol button{font-family:'Sriracha',serif;font-weight:600;transition:all 0.3s ease;background-color:var(--color-flap);border:2px solid rgba(255,255,255,0.8);border-radius:30px;color:#fff;text-shadow:0 2px 2px rgba(0,0,0,0.5);padding:6px 14px;margin:10px;font-size:16px;box-shadow:0 5px 20px rgba(0,0,0,0.15)}
        .reset button:hover, .tombol button:hover{background-color:var(--color-env2);transform:translateY(-3px) scale(1.05);box-shadow:0 7px 25px rgba(0,0,0,0.2)}
        .tombol{transform:scale(0);opacity:0;transition:all .7s ease}
        canvas{position:absolute;top:0;left:0;width:100%;height:100%;z-index:-1}
        .pic{font-size:3rem;margin-bottom:1rem}
        h1,h2{font-size:1rem;margin-bottom:1rem;font-weight:700}
        #containerPesan{padding:0;display:block;width:100%;overflow:auto;min-height:100px;max-height:220px;justify-content:left;text-align:left;}
        #teksCinta{text-align:left;font-size:13px;color:#fff;font-weight:600}
        #pesanAkhir{text-align:left;font-size:13px;color:#fff;font-weight:500}
        #teksLucu{text-align:left;font-size:13px;color:#fff;margin-top:1rem;font-weight:500}
        p{font-size:13.5px;margin-bottom:1rem;font-weight:500;text-shadow:0 2px 2px rgba(0,0,0,0.5);}
        .pink{color:pink}
        .kuning{color:yellow}
        #statusGame{margin-top:25px}
        button{background:#f43f5e;color:#fff;border:none;padding:0.5rem 1.5rem;border-radius:999px;font-size:1rem;transition:background 0.3s;font-weight:700}
        button:hover{background:#e11d48}
        .tombolCadangan{background:#6b7280}
        .tombolCadangan:hover{background:#4b5563}
        .papanGame{display:grid;grid-template-columns:repeat(4,1fr);grid-template-rows:repeat(3,auto);gap:0.5rem;justify-items:center;width:90%;max-width:600px;margin:auto}
        .kartu{width:50px;height:50px;}
        .dalemKartu{position:relative;width:100%;height:100%;transition:transform 0.6s;transform-style:preserve-3d}
        .kartu.balik .dalemKartu{transform:rotateY(180deg)}
        .depanKartu,.belakangKartu{position:absolute;width:100%;height:100%;backface-visibility:hidden;display:flex;align-items:center;justify-content:center;border:2px solid rgba(255,255,255, 0.5);border-radius:12px}
        .depanKartu{background:rgba(255,255,255,0.2);backdrop-filter:blur(5px)}
        .belakangKartu{background:rgba(255,255,255,0.5);transform:rotateY(180deg);font-size:1.5rem}
        .sembunyi, #linkmp3{display:none}
        .stiker{display:flex;justify-content:center;align-items:center;margin-left:auto;margin-right:auto;margin-bottom:20px;transform:scale(0);transition:all .7s ease}
        .stiker img{width:100px;height:100px;box-shadow: 0 8px 32px rgba(212, 175, 184, 0.4);backdrop-filter: blur(5px);-webkit-backdrop-filter: blur(5px);background: rgba(248, 225, 233, 0.3);border:2px solid rgba(255,255,255, 0.5);border-radius: 50%;padding:10px;}
        .hati{position:fixed;width:22px;height:22px;opacity:0.65;animation:ngelayang 7s ease-in-out forwards;left:0;bottom:0;top:0;z-index:0}
        @keyframes ngelayang{0%{transform:translateY(100vh);opacity:0.65}10%{opacity:0.65}90%{opacity:0.65}100%{transform:translateY(-100vh);opacity:0}}
        .hati svg{width:100%;height:100%;fill:none;stroke:pink}
        
        .wrapper{position:fixed}.circ div{position:fixed;width:60px;height:60px;background-color:transparent;border:6px solid rgba(255,255,255,0.5);border-radius:50%}.circ div:nth-child(1){top:12%;left:42%;animation:animate 10s linear infinite}.circ div:nth-child(2){top:70%;left:50%;animation:animate 7s linear infinite}.circ div:nth-child(3){top:17%;left:6%;animation:animate 9s linear infinite}.circ div:nth-child(4){top:20%;left:60%;animation:animate 10s linear infinite}.circ div:nth-child(5){top:67%;left:10%;animation:animate 6s linear infinite}.circ div:nth-child(6){top:80%;left:70%;animation:animate 12s linear infinite}.circ div:nth-child(7){top:60%;left:80%;animation:animate 15s linear infinite}.circ div:nth-child(8){top:32%;left:25%;animation:animate 16s linear infinite}.circ div:nth-child(9){top:90%;left:25%;animation:animate 9s linear infinite}.circ div:nth-child(10){top:20%;left:80%;animation:animate 5s linear infinite}@keyframes animate{0%{transform:scale(0) translateY(0) rotate(0);opacity:.8}100%{transform:scale(1.3) translateY(-90px) rotate(360deg);opacity:0}}

        /* Style for Password Input */
        #hal2{position:relative;margin:0 auto;margin-top:111px;transform:scale(0);transition:all .7s ease;background:rgba(248,225,233,0.1);backdrop-filter:blur(10px);border-radius:30px;box-shadow:0 8px 32px rgba(212,175,184,0.4);border:2px solid rgba(255,255,255,0.5);padding:15px;text-align:center;max-width:80%;width:400px;min-height:200px;z-index:1;}
        #hal2.active{transform:scale(1);opacity:1;}
        #passwordMessage{font-family:'Montserrat',sans-serif;color:pink;font-size:14px;text-shadow:0 2px 3px rgba(0,0,0,0.1);margin-bottom:15px;}
        #passwordInput{display:flex;justify-content:center;gap:8px;margin-bottom:15px;}
        #passwordInput span{width:25px;height:25px;background:rgba(255,255,255,0.3);border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:15px;font-weight:700;color:#fff;}
        #passwordKeypad{display:grid;grid-template-columns:repeat(3,1fr);gap:8px;max-width:250px;margin:0 auto;}
        #passwordKeypad button{background:rgba(255,255,255,0.2);backdrop-filter:blur(5px);border:2px solid rgba(255,255,255,0.5);border-radius:10px;color:#fff;font-size:1.2em;padding:8px;transition:all 0.3s ease;}
        #passwordKeypad button:hover{background:rgba(255,255,255,0.5);transform:translateY(-3px);}
        #passwordStatus{color:#fff;font-size:0.9em;margin-top:14px;}
        .hearts-password{position:absolute;top:10px;left:0;right:0;z-index:2;}
        .hearts-password .heart{position:absolute;bottom:0;pointer-events:none;}
        .hearts-password .heart:before,.hearts-password .heart:after{content:"";position:absolute;left:12.5px;top:0;width:12.5px;height:25px;background:var(--color-heart);border-radius:12.5px 12.5px 0 0;transform:rotate(-45deg);transform-origin:0 100%;}
        .hearts-password .heart:after{left:0;transform:rotate(45deg);transform-origin:100% 100%;}
        .hearts-password .a1{left:20%;transform:scale(0.6);animation:slideUp 4s linear infinite,sideSway 2s ease-in-out infinite alternate;}
        .hearts-password .a2{left:55%;animation:slideUp 5s linear infinite,sideSway 4s ease-in-out infinite alternate;}
        .hearts-password .a3{left:10%;transform:scale(0.8);animation:slideUp 7s linear infinite,sideSway 2s ease-in-out infinite alternate;}
        #hatiterbang{display:none}
        
        /* Style for Memory Game */
        #hal3 {}
        #hal3 canvas { position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; }

        /* Style for Final Message */
        #hal4 {}

        @media (max-width:600px){.kotak{width:80%;padding:1rem}#envelope{width:120px;height:82.5px;top:100px}.flap,.pocket{border-left-width:60px;border-right-width:60px;border-bottom-width:41.25px;border-top-width:41.25px}.letter{padding:10px}.message p{font-size:1.2em}.papanGame{grid-template-columns:repeat(4,1fr);gap:1rem 0.2rem}.kartu{width:40px;height:40px}.belakangKartu{font-size:1.2rem}}
    </style>
    <body>
      
      <audio src="https://feeldreams.github.io/audio/thousand.mp3" id="linkmp3"></audio>
      
      <div class="background-overlay" data-src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj1wpmlPkhjUfUGNF3TEuqfLkMeBa01tUmOMbSUJ_zUrPWSiiT6cv_m5656H256t1yvpGptkmhlR5FA9YhVE1ML0BXloIUaT06gDKiy8xtUSbfeOxWBBpEFss5DSuCsdlNG914EtAOc8y0Kvy_GCehnCRm3__hG1n0IvHZwmvXVjpxJOpGoazqnST0F45R3/s1600/1000402015.jpg"></div>

      <div id="hal1">
        <div class="envlope-wrapper">
          <div id="envelope" class="close">
            <div class="front flap"></div>
            <div class="front pocket"></div>
            <div class="letter">
              <div class="letter-corner corner-tl"></div>
              <div class="letter-corner corner-br"></div>
              <div class="message">
                <p id="teksAmplop"></p>
              </div>
            </div>
            <div class="hearts">
              <div class="heart a1"></div>
              <div class="heart a2"></div>
              <div class="heart a3"></div>
            </div>
            <div class="sparkles">
              <div class="sparkle s1"></div>
              <div class="sparkle s2"></div>
              <div class="sparkle s3"></div>
            </div>
          </div>
        </div>
        <div class="reset">
			<h3>masukkan pin:</h3>
			<h1>8154</h1>
          <button onclick="bukaEnvelope()">Buka</button>
        </div>
      </div>

      <div id="hal2" class="kotak sembunyi">
          <div id="hatiterbang" class="hearts-password">
            <div class="heart a1"></div>
            <div class="heart a2"></div>
            <div class="heart a3"></div>
          </div>
          <h2 id="hal2teksHeader"></h2>
          <p id="passwordMessage"><span id="hal2teksUtama"></span><span style='color:white;font-size:11px'><br><br><span id="hal2teksAkhir"></span></span></p>
          <div id="passwordInput">
            <span id="pin1"></span>
            <span id="pin2"></span>
            <span id="pin3"></span>
            <span id="pin4"></span>
          </div>
          <div id="passwordKeypad">
            <button onclick="inputPassword(1)">1</button>
            <button onclick="inputPassword(2)">2</button>
            <button onclick="inputPassword(3)">3</button>
            <button onclick="inputPassword(4)">4</button>
            <button onclick="inputPassword(5)">5</button>
            <button onclick="inputPassword(6)">6</button>
            <button onclick="inputPassword(7)">7</button>
            <button onclick="inputPassword(8)">8</button>
            <button onclick="inputPassword(9)">9</button>
            <button onclick="inputPassword(0)" style="grid-column: 2;">0</button>
          </div>
          <p id="passwordStatus"></p>
        </div>

      <div id="hal3" class="kotak sembunyi">
        <canvas id="game-canvas"></canvas>
        <h2>Memory Game 😋💕</h2>
        <p>Sekarang,<br>Cocokkan kartu² ini yaa! 😆🫵</p>
        <div id="kotakPesan"></div>
        <div id="papanGame" class="papanGame"></div>
        <p id="statusGame"></p>
        <button id="lanjut" onclick="pindahHal(4)" class="sembunyi">Lihat Pesan Cinta!</button>
        <button id="ulang" onclick="mulaiHal3()" class="tombolCadangan sembunyi">Coba Lagi!</button>
      </div>

      <div id="hal4" class="kotak sembunyi">
        <div id="stiker4" class="stiker">
            <img id="stiker4a" src="https://htmlku.com/0/panda/pusn.gif" />
            <img id="stiker4b" class="sembunyi" src="https://htmlku.com/0/panda/putihelus.gif" />
        </div>
        <div id="containerPesan">
            <p id="teksCinta"></p>
            <p id="pesanAkhir"></p>
            <p id="teksLucu"></p>
        </div>
        <button style="display:none" onclick="shareWa()">Kirim ke Dia!</button>
      </div>
      <div class="tombol">
        <button onclick="balasWa()">Balas</button>
      </div>
      
      <div id="circgroup">
            <div>
                <div class="circ">
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </div>
        </div>

      <script>
        // Edit Icon Memory Game di Sini
        const kartu = [
          { id: 3, icon: '💖', pesan: '' },
          { id: 5, icon: '💌', pesan: '' },
          { id: 1, icon: '🩷', pesan: '' },
          { id: 6, icon: '💘', pesan: '' },
          { id: 2, icon: '💓', pesan: '' },
          { id: 4, icon: '❤️', pesan: '' },
          { id: 1, icon: '🩷', pesan: '' },
          { id: 3, icon: '💖', pesan: '' },
          { id: 5, icon: '💌', pesan: '' },
          { id: 2, icon: '💓', pesan: '' },
          { id: 4, icon: '❤️', pesan: '' },
          { id: 6, icon: '💘', pesan: '' }
        ];

        // Edit Kata-kata di Sini
        var vteksAmplop = "Alooo Kamuu! 🥳";
        var vhal2teksHeader = "Masukin PIN dulu yaa! 🫣";
        var vhal2teksUtama = "Coba tebak passwordnya,<br><i>i bet u know!</i> 😋💕";
        var vhal2teksAkhir = "Clue: Video Call & Chat ᯓᡣ𐭩";
        var pinPassword = "<?php echo $ADMIN_PASS; ?>"; // Get password from PHP
        var statusBenar = "Yeayy benerr! 🥳 Logging in...";
        var statusSalah = "Oops, coba lagi ya! 💔";

        var txtHeader = "Sekarang, aku cuma mau bilang 💌<br>— 𖹭.ᐟ";  
        var txtPesanUtama = "Menurut biologi kamu adalah <span class='kuning'>7%</span> darah,<br>Menurut kimia kamu adalah <span class='kuning'>70%</span> air,<br>Menurut fisika kamu adalah <span class='kuning'>99%</span> ruang hampa,<br><br>Tapi menurut aku, kamu adalah<br><b><span class='pink'>100%</span> kesayangankuuu 🫣🩷</b>";  
        var txtTambahan = "<b>Lopyuu endlessly ayangkuu</b> tersayang, termanis, terlucu, terimuutttt, <b>sehat terus yaa sayanggg 💕💞💓💘🌺</b>";
        var teksPesanWa = "Lopyuu too sayaangggg!";
      </script>
        <script>
        // Save
        teksAmplop.innerHTML = vteksAmplop;
        hal2teksHeader.innerHTML = vhal2teksHeader;
        hal2teksUtama.innerHTML = vhal2teksUtama;
        hal2teksAkhir.innerHTML = vhal2teksAkhir;
      </script>
      <script>
        audio = new Audio('' + linkmp3.src);

        // Elemen Background
        const backgroundOverlay = document.querySelector('.background-overlay');
        const bgImageUrl = backgroundOverlay.getAttribute('data-src');
        backgroundOverlay.style.background = `url('${bgImageUrl}') no-repeat center center fixed`;
        backgroundOverlay.style.backgroundSize = 'cover';

        // Buka Envelope
        function bukaEnvelope() {
          audio.play();
          const envelope = document.getElementById('envelope');
          envelope.classList.remove('close');
          envelope.classList.add('open');
          document.querySelector(".reset").style="transform:scale(0);opacity:0;transition:all .7s ease";
          setTimeout(() => {
            document.querySelector("#envelope").style="transform:scale(0);opacity:0;transition:all .7s ease";
            setTimeout(() => {
              pindahHal(2); // Langsung ke halaman password (sekarang #hal2)
              envelope.classList.remove('open');
              envelope.classList.add('close');
            }, 500);
          }, 1000);
        }

        // Navigasi Halaman
        function pindahHal(hal) {
            const halaman = ['hal1', 'hal2', 'hal3', 'hal4'];
            for (let i = 1; i <= 3; i++) {
                if (hal < 3) document.getElementById(`hal${i}`).classList.add('sembunyi');
            }
            if (hal < 3) document.getElementById(`hal${hal}`).classList.remove('sembunyi');
            
            const elemenTarget = document.getElementById(halaman[hal - 1]);
            if (elemenTarget && hal <= halaman.length) elemenTarget.classList.remove('sembunyi');

            setTimeout(() => {
                if (hal === 2) {
                    hal1.classList.add('sembunyi');
                    mulaiHalPassword();
                    const hal2 = document.getElementById('hal2');
                    if (hal2) hal2.classList.add('active');
                    const circgroup = document.getElementById('circgroup');
                    if (circgroup) circgroup.style = "opacity:0;transition:all .7s ease";
                    setTimeout(()=>{hatiterbang.style="display:block";}, 400);
                } else {
                    const prevHal = document.getElementById(halaman[hal - 2]);
                    if (prevHal) prevHal.style = "transform:scale(0);opacity:0;transition:all .7s ease";
                    setTimeout(() => {
                        if (prevHal) prevHal.classList.add('sembunyi');
                        const currentHal = document.getElementById(halaman[hal - 1]);
                        if (currentHal) currentHal.classList.remove('sembunyi');
                        setTimeout(() => {
                        if (currentHal) currentHal.style = "transform:scale(1);opacity:1;transition:all .7s ease";
                        }, 100);
                    }, 500);
                }
            }, 50);
        }

        // Password Input Logic
        let password = '';

        function inputPassword(num) {
          if (password.length < 4) {
            password += num;
            updatePinDisplay();
            if (password.length === 4) {
              setTimeout(checkPassword,500);
            }
          }
        }
        
        function updatePinDisplay() {
          const pins = ['pin1', 'pin2', 'pin3', 'pin4'];
          pins.forEach((pinId, index) => {
            const pin = document.getElementById(pinId);
            if (pin) {
              pin.textContent = password[index] || '';
            }
          });
        }
        
        function checkPassword() {
          const status = document.getElementById('passwordStatus');
          if (status) {
            if (password === pinPassword) {
              status.textContent = statusBenar;
              
              // Create a form to submit the password to the PHP backend
              const form = document.createElement('form');
              form.method = 'post';
              form.action = ''; // Submit to the current page

              const actionInput = document.createElement('input');
              actionInput.type = 'hidden';
              actionInput.name = 'action';
              actionInput.value = 'login';
              form.appendChild(actionInput);

              const passwordInput = document.createElement('input');
              passwordInput.type = 'hidden';
              passwordInput.name = 'password';
              passwordInput.value = password;
              form.appendChild(passwordInput);

              document.body.appendChild(form);
              setTimeout(() => {
                  form.submit();
              }, 1000); // Wait 1 second before submitting
              
            } else {
              status.textContent = statusSalah;
              password = '';
              updatePinDisplay();
              setTimeout(() => {
                if (status) status.textContent = '';
              }, 2000);
            }
          }
        }
        
        function mulaiHalPassword() {
          password = '';
          const status = document.getElementById('passwordStatus');
          if (status) status.textContent = '';
          updatePinDisplay();
        }
      </script>
      <?php if (!empty($error)): ?>
      <script>
        document.addEventListener('DOMContentLoaded', function() {
            const status = document.getElementById('passwordStatus');
            if (status) {
                status.textContent = "<?php echo htmlspecialchars($error); ?>";
                setTimeout(() => {
                    status.textContent = '';
                }, 2000);
            }
        });
      </script>
      <?php endif; ?>
    </body>
    </html>
<?php
} else {
?>
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Venom Gem Cyber™ (VGC)</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        /* Gaya kustom untuk efek "gelas" (glassmorphism) */
        .gelas {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
            color: white; 
        }
        body {
            /* Contoh background agar efek gelas terlihat */
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .card-gelas {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            padding: 30px;
            margin-top: 20px;
        }
        .navbar-gelas {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.3);
        }
        /* --- Gaya List Group dengan Animasi --- */
        .list-group-item-gelas {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border-color: rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease; /* Transisi untuk animasi */
        }
        .list-group-item-gelas:hover {
            background: rgba(255, 255, 255, 0.3);
            cursor: pointer;
            transform: translateY(-3px); /* Efek bergerak sedikit ke atas */
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); /* Efek bayangan lebih jelas */
        }
        /* ------------------------------------- */
        .text-shadow {
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        } 
        /* Pastikan mb-2 berfungsi di nav item saat tampilan mobile */
		.navbar-nav .nav-item.mb-2 { 
             margin-bottom: 0.5rem !important; /* Jarak 8px */
        }
        /* Override mb-2 di list group agar konsisten */
        .list-group .mb-2 {
            margin-bottom: 0.5rem !important;
        }
    </style>
</head>
<body>

<nav class="navbar navbar-expand-lg navbar-dark fixed-top navbar-gelas">
    <div class="container">
        <a class="navbar-brand text-shadow" href="<?php echo basename($_SERVER['PHP_SELF']); ?>">Tools (VGC)</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item mb-2">
                    <a class="nav-link" href="https://link.dana.id/minta?full_url=https://qr.dana.id/v1/281012092025093015561306" target="_blank">Donasi Cuk</a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link" href="net.php">Cek Website</a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link" href="vercel.php">Vercel App</a>
                </li>                
                <li class="nav-item mb-2">
                    <a class="nav-link" href="../vc/index.php">Live Cam</a>
                </li>
                <li class="nav-item mb-2">
                    <a class="nav-link" href="phpbase64.php">Encoder/Decoder base64</a>
                </li>
				<li class="nav-item mb-2">
                    <a class="nav-link" href="?logout=1">Logout</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="container" style="padding-top: 100px;">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card-gelas text-white">
                <h1 class="text-center mb-4 text-shadow">Selamat Datang di Aplikasi Tools (VGC)</h1>
                <p class="text-center mb-5">Gunakan navigasi di atas untuk mengakses fitur-fitur utama, atau lihat daftar lengkap di bawah ini.</p>

                <h3 class="mt-5 mb-3 text-shadow">Daftar Fitur dan Penjelasan</h3>
                
                <div class="list-group">       
                    <a href="https://link.dana.id/minta?full_url=https://qr.dana.id/v1/281012092025093015561306" target="_blank" class="list-group-item list-group-item-action list-group-item-gelas d-flex justify-content-between align-items-start mb-2">
                        <div class="me-auto">
                            <div class="fw-bold fs-5">Donasi Cuk</div>
                            <p class="mb-1">Memberikan **dukungan finansial** kepada pengembang aplikasi melalui platform **DANA**.</p>
                        </div>
                        <span class="badge bg-warning text-dark rounded-pill mt-2">Aksi: Donasi/Dukung</span>
                    </a>

                    <a href="net.php" class="list-group-item list-group-item-action list-group-item-gelas d-flex justify-content-between align-items-start mb-2">
                        <div class="me-auto">
                            <div class="fw-bold fs-5">Cek Website</div>
                            <p class="mb-1">Mengarah ke halaman untuk melakukan pengecekan status atau informasi terkait website/domain.</p>
                        </div>
                        <span class="badge bg-success rounded-pill mt-2">Modul: Utilitas</span>
                    </a>
      <a href="vercel.php" class="list-group-item list-group-item-action list-group-item-gelas d-flex justify-content-between align-items-start mb-2">
                        <div class="me-auto">
                            <div class="fw-bold fs-5">Vercel App</div>
                            <p class="mb-1">membuat website html dan mendukung nodejs dan lain2 hanya di vercel.</p>
                        </div>
                        <span class="badge bg-success rounded-pill mt-2">Modul: Utilitas</span>
                    </a>
                    <a href="../vc/index.php" class="list-group-item list-group-item-action list-group-item-gelas d-flex justify-content-between align-items-start mb-2">
                        <div class="me-auto">
                            <div class="fw-bold fs-5">Live Cam</div>
                            <p class="mb-1">Mengakses modul Live Camera untuk menampilkan atau mengelola **streaming kamera langsung** (Live Cam).</p>
                        </div>
                        <span class="badge bg-info text-dark rounded-pill mt-2">Modul: Multimedia</span>
                    </a>

                    <a href="phpbase64.php" class="list-group-item list-group-item-action list-group-item-gelas d-flex justify-content-between align-items-start mb-2">
                        <div class="me-auto">
                            <div class="fw-bold fs-5">Encoder/Decoder base64</div>
                            <p class="mb-1">Alat utilitas untuk melakukan **enkoding dan dekoding** teks menggunakan Base64.</p>
                        </div>
                        <span class="badge bg-danger rounded-pill mt-2">Modul: Tools</span>
                    </a>

                    </div>
                </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html> 
<?php 
	   } 
?>')); ?>